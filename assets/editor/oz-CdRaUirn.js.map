{"version":3,"file":"oz-CdRaUirn.js","sources":["../node_modules/@codemirror/legacy-modes/mode/oz.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar singleOperators = /[\\^@!\\|<>#~\\.\\*\\-\\+\\\\/,=]/;\nvar doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\\\=)|(\\\\=:)|(!!)|(==)|(::)/;\nvar tripleOperators = /(:::)|(\\.\\.\\.)|(=<:)|(>=:)/;\n\nvar middle = [\"in\", \"then\", \"else\", \"of\", \"elseof\", \"elsecase\", \"elseif\", \"catch\",\n              \"finally\", \"with\", \"require\", \"prepare\", \"import\", \"export\", \"define\", \"do\"];\nvar end = [\"end\"];\n\nvar atoms = wordRegexp([\"true\", \"false\", \"nil\", \"unit\"]);\nvar commonKeywords = wordRegexp([\"andthen\", \"at\", \"attr\", \"declare\", \"feat\", \"from\", \"lex\",\n                                 \"mod\", \"div\", \"mode\", \"orelse\", \"parser\", \"prod\", \"prop\", \"scanner\", \"self\", \"syn\", \"token\"]);\nvar openingKeywords = wordRegexp([\"local\", \"proc\", \"fun\", \"case\", \"class\", \"if\", \"cond\", \"or\", \"dis\",\n                                  \"choice\", \"not\", \"thread\", \"try\", \"raise\", \"lock\", \"for\", \"suchthat\", \"meth\", \"functor\"]);\nvar middleKeywords = wordRegexp(middle);\nvar endKeywords = wordRegexp(end);\n\n// Tokenizers\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  // Brackets\n  if(stream.match(/[{}]/)) {\n    return \"bracket\";\n  }\n\n  // Special [] keyword\n  if (stream.match('[]')) {\n    return \"keyword\"\n  }\n\n  // Operators\n  if (stream.match(tripleOperators) || stream.match(doubleOperators)) {\n    return \"operator\";\n  }\n\n  // Atoms\n  if(stream.match(atoms)) {\n    return 'atom';\n  }\n\n  // Opening keywords\n  var matched = stream.match(openingKeywords);\n  if (matched) {\n    if (!state.doInCurrentLine)\n      state.currentIndent++;\n    else\n      state.doInCurrentLine = false;\n\n    // Special matching for signatures\n    if(matched[0] == \"proc\" || matched[0] == \"fun\")\n      state.tokenize = tokenFunProc;\n    else if(matched[0] == \"class\")\n      state.tokenize = tokenClass;\n    else if(matched[0] == \"meth\")\n      state.tokenize = tokenMeth;\n\n    return 'keyword';\n  }\n\n  // Middle and other keywords\n  if (stream.match(middleKeywords) || stream.match(commonKeywords)) {\n    return \"keyword\"\n  }\n\n  // End keywords\n  if (stream.match(endKeywords)) {\n    state.currentIndent--;\n    return 'keyword';\n  }\n\n  // Eat the next char for next comparisons\n  var ch = stream.next();\n\n  // Strings\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  // Numbers\n  if (/[~\\d]/.test(ch)) {\n    if (ch == \"~\") {\n      if(! /^[0-9]/.test(stream.peek()))\n        return null;\n      else if (( stream.next() == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n        return \"number\";\n    }\n\n    if ((ch == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n      return \"number\";\n\n    return null;\n  }\n\n  // Comments\n  if (ch == \"%\") {\n    stream.skipToEnd();\n    return 'comment';\n  }\n  else if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n  }\n\n  // Single operators\n  if(singleOperators.test(ch)) {\n    return \"operator\";\n  }\n\n  // If nothing match, we skip the entire alphanumerical block\n  stream.eatWhile(/\\w/);\n\n  return \"variable\";\n}\n\nfunction tokenClass(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n  stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);\n  state.tokenize = tokenBase;\n  return \"type\"\n}\n\nfunction tokenMeth(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n  stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);\n  state.tokenize = tokenBase;\n  return \"def\"\n}\n\nfunction tokenFunProc(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  if(!state.hasPassedFirstStage && stream.eat(\"{\")) {\n    state.hasPassedFirstStage = true;\n    return \"bracket\";\n  }\n  else if(state.hasPassedFirstStage) {\n    stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\\$/);\n    state.hasPassedFirstStage = false;\n    state.tokenize = tokenBase;\n    return \"def\"\n  }\n  else {\n    state.tokenize = tokenBase;\n    return null;\n  }\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped)\n      state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction buildElectricInputRegEx() {\n  // Reindentation should occur on [] or on a match of any of\n  // the block closing keywords, at the end of a line.\n  var allClosings = middle.concat(end);\n  return new RegExp(\"[\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n}\n\nexport const oz = {\n  name: \"oz\",\n\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      currentIndent: 0,\n      doInCurrentLine: false,\n      hasPassedFirstStage: false\n    };\n  },\n\n  token: function (stream, state) {\n    if (stream.sol())\n      state.doInCurrentLine = 0;\n\n    return state.tokenize(stream, state);\n  },\n\n  indent: function (state, textAfter, cx) {\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n\n    if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\\[])/))\n      return cx.unit * (state.currentIndent - 1);\n\n    if (state.currentIndent < 0)\n      return 0;\n\n    return state.currentIndent * cx.unit\n  },\n\n  languageData: {\n    indentOnInut: buildElectricInputRegEx(),\n    commentTokens: {line: \"%\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n"],"names":["wordRegexp","words","singleOperators","doubleOperators","tripleOperators","middle","end","atoms","commonKeywords","openingKeywords","middleKeywords","endKeywords","tokenBase","stream","state","matched","tokenFunProc","tokenClass","tokenMeth","ch","tokenString","tokenComment","maybeEnd","quote","escaped","next","buildElectricInputRegEx","allClosings","oz","textAfter","cx","trueText"],"mappings":"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","x_google_ignoreList":[0]}