{"version":3,"file":"forth-Ffai-XNe.js","sources":["../node_modules/@codemirror/legacy-modes/mode/forth.js"],"sourcesContent":["function toWordList(words) {\n  var ret = [];\n  words.split(' ').forEach(function(e){\n    ret.push({name: e});\n  });\n  return ret;\n}\n\nvar coreWordList = toWordList(\n  'INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\n\nvar immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\n\nfunction searchWordList (wordList, word) {\n  var i;\n  for (i = wordList.length - 1; i >= 0; i--) {\n    if (wordList[i].name === word.toUpperCase()) {\n      return wordList[i];\n    }\n  }\n  return undefined;\n}\nexport const forth = {\n  name: \"forth\",\n  startState: function() {\n    return {\n      state: '',\n      base: 10,\n      coreWordList: coreWordList,\n      immediateWordList: immediateWordList,\n      wordList: []\n    };\n  },\n  token: function (stream, stt) {\n    var mat;\n    if (stream.eatSpace()) {\n      return null;\n    }\n    if (stt.state === '') { // interpretation\n      if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n        stt.state = ' compilation';\n        return 'builtin';\n      }\n      mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n      if (mat) {\n        stt.wordList.push({name: mat[2].toUpperCase()});\n        stt.state = ' compilation';\n        return 'def';\n      }\n      mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n      if (mat) {\n        stt.wordList.push({name: mat[2].toUpperCase()});\n        return 'def';\n      }\n      mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n      if (mat) {\n        return 'builtin'\n      }\n    } else { // compilation\n      // ; [\n      if (stream.match(/^(\\;|\\[)(\\s)/)) {\n        stt.state = '';\n        stream.backUp(1);\n        return 'builtin';\n      }\n      if (stream.match(/^(\\;|\\[)($)/)) {\n        stt.state = '';\n        return 'builtin';\n      }\n      if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n        return 'builtin';\n      }\n    }\n\n    // dynamic wordlist\n    mat = stream.match(/^(\\S+)(\\s+|$)/);\n    if (mat) {\n      if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n        return 'variable';\n      }\n\n      // comments\n      if (mat[1] === '\\\\') {\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      // core words\n      if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n        return 'builtin';\n      }\n      if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n        return 'keyword';\n      }\n\n      if (mat[1] === '(') {\n        stream.eatWhile(function (s) { return s !== ')'; });\n        stream.eat(')');\n        return 'comment';\n      }\n\n      // // strings\n      if (mat[1] === '.(') {\n        stream.eatWhile(function (s) { return s !== ')'; });\n        stream.eat(')');\n        return 'string';\n      }\n      if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n        stream.eatWhile(function (s) { return s !== '\"'; });\n        stream.eat('\"');\n        return 'string';\n      }\n\n      // numbers\n      if (mat[1] - 0xfffffffff) {\n        return 'number';\n      }\n      // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n      //     return 'number';\n      // }\n\n      return 'atom';\n    }\n  }\n};\n"],"names":["toWordList","words","ret","e","coreWordList","immediateWordList","searchWordList","wordList","word","i","forth","stream","stt","mat","s"],"mappings":"AAAA,SAASA,EAAWC,EAAO,CACzB,IAAIC,EAAM,CAAA,EACV,OAAAD,EAAM,MAAM,GAAG,EAAE,QAAQ,SAASE,EAAE,CAClCD,EAAI,KAAK,CAAC,KAAMC,CAAC,CAAC,CACtB,CAAG,EACMD,CACT,CAEA,IAAIE,EAAeJ,EACjB,q6BAqC4D,EAE1DK,EAAoBL,EAAW,kIAAkI,EAErK,SAASM,EAAgBC,EAAUC,EAAM,CACvC,IAAIC,EACJ,IAAKA,EAAIF,EAAS,OAAS,EAAGE,GAAK,EAAGA,IACpC,GAAIF,EAASE,CAAC,EAAE,OAASD,EAAK,YAAW,EACvC,OAAOD,EAASE,CAAC,CAIvB,CACY,MAACC,EAAQ,CACnB,KAAM,QACN,WAAY,UAAW,CACrB,MAAO,CACL,MAAO,GACP,KAAM,GACN,aAAcN,EACd,kBAAmBC,EACnB,SAAU,CAAE,CAClB,CACG,EACD,MAAO,SAAUM,EAAQC,EAAK,CAC5B,IAAIC,EACJ,GAAIF,EAAO,WACT,OAAO,KAET,GAAIC,EAAI,QAAU,GAAI,CACpB,GAAID,EAAO,MAAM,sBAAsB,EACrC,OAAAC,EAAI,MAAQ,eACL,UAGT,GADAC,EAAMF,EAAO,MAAM,sBAAsB,EACrCE,EACF,OAAAD,EAAI,SAAS,KAAK,CAAC,KAAMC,EAAI,CAAC,EAAE,YAAa,CAAA,CAAC,EAC9CD,EAAI,MAAQ,eACL,MAGT,GADAC,EAAMF,EAAO,MAAM,qFAAqF,EACpGE,EACF,OAAAD,EAAI,SAAS,KAAK,CAAC,KAAMC,EAAI,CAAC,EAAE,YAAa,CAAA,CAAC,EACvC,MAGT,GADAA,EAAMF,EAAO,MAAM,6BAA6B,EAC5CE,EACF,MAAO,SAEf,KAAW,CAEL,GAAIF,EAAO,MAAM,cAAc,EAC7B,OAAAC,EAAI,MAAQ,GACZD,EAAO,OAAO,CAAC,EACR,UAET,GAAIA,EAAO,MAAM,aAAa,EAC5B,OAAAC,EAAI,MAAQ,GACL,UAET,GAAID,EAAO,MAAM,0BAA0B,EACzC,MAAO,SAEV,CAID,GADAE,EAAMF,EAAO,MAAM,eAAe,EAC9BE,EACF,OAAIP,EAAeM,EAAI,SAAUC,EAAI,CAAC,CAAC,IAAM,OACpC,WAILA,EAAI,CAAC,IAAM,MACbF,EAAO,UAAS,EACT,WAILL,EAAeM,EAAI,aAAcC,EAAI,CAAC,CAAC,IAAM,OACxC,UAELP,EAAeM,EAAI,kBAAmBC,EAAI,CAAC,CAAC,IAAM,OAC7C,UAGLA,EAAI,CAAC,IAAM,KACbF,EAAO,SAAS,SAAUG,EAAG,CAAE,OAAOA,IAAM,GAAI,CAAE,EAClDH,EAAO,IAAI,GAAG,EACP,WAILE,EAAI,CAAC,IAAM,MACbF,EAAO,SAAS,SAAUG,EAAG,CAAE,OAAOA,IAAM,GAAI,CAAE,EAClDH,EAAO,IAAI,GAAG,EACP,UAELE,EAAI,CAAC,IAAM,MAAQA,EAAI,CAAC,IAAM,MAAQA,EAAI,CAAC,IAAM,MACnDF,EAAO,SAAS,SAAUG,EAAG,CAAE,OAAOA,IAAM,GAAI,CAAE,EAClDH,EAAO,IAAI,GAAG,EACP,UAILE,EAAI,CAAC,EAAI,YACJ,SAMF,MAEV,CACH","x_google_ignoreList":[0]}