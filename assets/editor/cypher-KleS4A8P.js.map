{"version":3,"file":"cypher-KleS4A8P.js","sources":["../node_modules/@codemirror/legacy-modes/mode/cypher.js"],"sourcesContent":["var wordRegexp = function(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n};\n\nvar tokenBase = function(stream/*, state*/) {\n  curPunc = null;\n  var ch = stream.next();\n  if (ch ==='\"') {\n    stream.match(/^.*?\"/);\n    return \"string\";\n  }\n  if (ch === \"'\") {\n    stream.match(/^.*?'/);\n    return \"string\";\n  }\n  if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  } else if (ch === \"/\" && stream.eat(\"/\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if (stream.eat(\":\")) {\n      stream.eatWhile(/[\\w\\d_\\-]/);\n      return \"atom\";\n    }\n    var word = stream.current();\n    if (funcs.test(word)) return \"builtin\";\n    if (preds.test(word)) return \"def\";\n    if (keywords.test(word) || systemKeywords.test(word)) return \"keyword\";\n    return \"variable\";\n  }\n};\nvar pushContext = function(state, type, col) {\n  return state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n};\nvar popContext = function(state) {\n  state.indent = state.context.indent;\n  return state.context = state.context.prev;\n};\nvar curPunc;\nvar funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\nvar preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\nvar keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\nvar systemKeywords = wordRegexp([\"access\", \"active\", \"assign\", \"all\", \"alter\", \"as\", \"catalog\", \"change\", \"copy\", \"create\", \"constraint\", \"constraints\", \"current\", \"database\", \"databases\", \"dbms\", \"default\", \"deny\", \"drop\", \"element\", \"elements\", \"exists\", \"from\", \"grant\", \"graph\", \"graphs\", \"if\", \"index\", \"indexes\", \"label\", \"labels\", \"management\", \"match\", \"name\", \"names\", \"new\", \"node\", \"nodes\", \"not\", \"of\", \"on\", \"or\", \"password\", \"populated\", \"privileges\", \"property\", \"read\", \"relationship\", \"relationships\", \"remove\", \"replace\", \"required\", \"revoke\", \"role\", \"roles\", \"set\", \"show\", \"start\", \"status\", \"stop\", \"suspended\", \"to\", \"traverse\", \"type\", \"types\", \"user\", \"users\", \"with\", \"write\"]);\nvar operatorChars = /[*+\\-<>=&|~%^]/;\n\nexport const cypher = {\n  name: \"cypher\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && (state.context.align == null)) {\n        state.context.align = false;\n      }\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) {\n      return null;\n    }\n    var style = state.tokenize(stream, state);\n    if (style !== \"comment\" && state.context && (state.context.align == null) && state.context.type !== \"pattern\") {\n      state.context.align = true;\n    }\n    if (curPunc === \"(\") {\n      pushContext(state, \")\", stream.column());\n    } else if (curPunc === \"[\") {\n      pushContext(state, \"]\", stream.column());\n    } else if (curPunc === \"{\") {\n      pushContext(state, \"}\", stream.column());\n    } else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type === \"pattern\") {\n        popContext(state);\n      }\n      if (state.context && curPunc === state.context.type) {\n        popContext(state);\n      }\n    } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n      popContext(state);\n    } else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) {\n        pushContext(state, \"pattern\", stream.column());\n      } else if (state.context.type === \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n    return style;\n  },\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar)) {\n      while (context && context.type === \"pattern\") {\n        context = context.prev;\n      }\n    }\n    var closing = context && firstChar === context.type;\n    if (!context) return 0;\n    if (context.type === \"keywords\") return null\n    if (context.align) return context.col + (closing ? 0 : 1);\n    return context.indent + (closing ? 0 : cx.unit);\n  }\n};\n"],"names":["wordRegexp","words","tokenBase","stream","curPunc","ch","operatorChars","word","funcs","preds","keywords","systemKeywords","pushContext","state","type","col","popContext","cypher","style","textAfter","cx","firstChar","context","closing"],"mappings":"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","x_google_ignoreList":[0]}