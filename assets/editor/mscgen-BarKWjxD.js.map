{"version":3,"file":"mscgen-BarKWjxD.js","sources":["../node_modules/@codemirror/legacy-modes/mode/mscgen.js"],"sourcesContent":["function mkParser(lang) {\n  return {\n    name: \"mscgen\",\n    startState: startStateFn,\n    copyState: copyStateFn,\n    token: produceTokenFunction(lang),\n    languageData: {\n      commentTokens: {line: \"#\", block: {open: \"/*\", close: \"*/\"}}\n    }\n  }\n}\n\nexport const mscgen = mkParser({\n  \"keywords\" : [\"msc\"],\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\"],\n  \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"], // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nexport const msgenny = mkParser({\n  \"keywords\" : null,\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\" : null,\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"],\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nexport const xu = mkParser({\n  \"keywords\" : [\"msc\", \"xu\"],\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\", \"title\", \"deactivate\", \"activate\", \"activation\"],\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"],  // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nfunction wordRegexpBoundary(pWords) {\n  return new RegExp(\"^\\\\b(\" + pWords.join(\"|\") + \")\\\\b\", \"i\");\n}\n\nfunction wordRegexp(pWords) {\n  return new RegExp(\"^(?:\" + pWords.join(\"|\") + \")\", \"i\");\n}\n\nfunction startStateFn() {\n  return {\n    inComment : false,\n    inString : false,\n    inAttributeList : false,\n    inScript : false\n  };\n}\n\nfunction copyStateFn(pState) {\n  return {\n    inComment : pState.inComment,\n    inString : pState.inString,\n    inAttributeList : pState.inAttributeList,\n    inScript : pState.inScript\n  };\n}\n\nfunction produceTokenFunction(pConfig) {\n  return function(pStream, pState) {\n    if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {\n      return \"bracket\";\n    }\n    /* comments */\n    if (!pState.inComment) {\n      if (pStream.match(/\\/\\*[^\\*\\/]*/, true, true)) {\n        pState.inComment = true;\n        return \"comment\";\n      }\n      if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {\n        pStream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (pState.inComment) {\n      if (pStream.match(/[^\\*\\/]*\\*\\//, true, true))\n        pState.inComment = false;\n      else\n        pStream.skipToEnd();\n      return \"comment\";\n    }\n    /* strings */\n    if (!pState.inString && pStream.match(/\\\"(\\\\\\\"|[^\\\"])*/, true, true)) {\n      pState.inString = true;\n      return \"string\";\n    }\n    if (pState.inString) {\n      if (pStream.match(/[^\\\"]*\\\"/, true, true))\n        pState.inString = false;\n      else\n        pStream.skipToEnd();\n      return \"string\";\n    }\n    /* keywords & operators */\n    if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true))\n      return \"keyword\";\n\n    if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true))\n      return \"operator\";\n\n    if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true))\n      return \"variable\";\n\n    /* attribute lists */\n    if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {\n      pConfig.inAttributeList = true;\n      return \"bracket\";\n    }\n    if (pConfig.inAttributeList) {\n      if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {\n        return \"attribute\";\n      }\n      if (pStream.match(']', true, true)) {\n        pConfig.inAttributeList = false;\n        return \"bracket\";\n      }\n    }\n\n    pStream.next();\n    return null\n  };\n}\n"],"names":["mkParser","lang","startStateFn","copyStateFn","produceTokenFunction","mscgen","msgenny","xu","wordRegexpBoundary","pWords","wordRegexp","pState","pConfig","pStream"],"mappings":"AAAA,SAASA,EAASC,EAAM,CACtB,MAAO,CACL,KAAM,SACN,WAAYC,EACZ,UAAWC,EACX,MAAOC,EAAqBH,CAAI,EAChC,aAAc,CACZ,cAAe,CAAC,KAAM,IAAK,MAAO,CAAC,KAAM,KAAM,MAAO,IAAI,CAAC,CAC5D,CACF,CACH,CAEY,MAACI,EAASL,EAAS,CAC7B,SAAa,CAAC,KAAK,EACnB,QAAY,CAAC,SAAU,QAAS,cAAe,cAAc,EAC7D,UAAc,CAAC,OAAQ,QAAS,KAAM,KAAK,EAC3C,WAAe,CAAC,QAAS,QAAS,KAAM,MAAO,YAAa,aAAc,YAAa,aAAc,cAAe,eAAgB,eAAgB,gBAAiB,eAAgB,gBAAiB,iBAAkB,kBAAmB,SAAS,EACpP,SAAa,CAAC,MAAO,KAAK,EAC1B,UAAc,CAAC,OAAQ,OAAQ,OAAQ,KAAK,EAC5C,WAAe,CAAC,YAAa,YAAa,MAAO,KAAM,MAAO,KAAM,QAAS,MAAO,SAAU,OAAQ,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,IAAI,EAC3L,cAAkB,CAAC,KAAM,GAAG,EAC5B,UAAc,CAAC,GAAG,CACpB,CAAC,EAEYM,EAAUN,EAAS,CAC9B,SAAa,KACb,QAAY,CAAC,SAAU,QAAS,cAAe,eAAgB,mBAAoB,WAAW,EAC9F,UAAc,CAAC,OAAQ,QAAS,KAAM,MAAO,MAAM,EACnD,WAAe,KACf,SAAa,CAAC,MAAO,KAAK,EAC1B,UAAc,CAAC,OAAQ,OAAQ,OAAQ,MAAO,MAAO,OAAQ,MAAO,QAAS,MAAO,MAAO,SAAU,MAAO,WAAY,SAAU,WAAY,SAAU,OAAQ,MAAO,KAAK,EAC5K,WAAe,CAAC,YAAa,YAAa,MAAO,KAAM,MAAO,KAAM,QAAS,MAAO,SAAU,OAAQ,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,IAAI,EAC3L,cAAkB,CAAC,KAAM,GAAG,EAC5B,UAAc,CAAC,GAAG,CACpB,CAAC,EAEYO,EAAKP,EAAS,CACzB,SAAa,CAAC,MAAO,IAAI,EACzB,QAAY,CAAC,SAAU,QAAS,cAAe,eAAgB,mBAAoB,WAAW,EAC9F,UAAc,CAAC,OAAQ,QAAS,KAAM,MAAO,MAAM,EACnD,WAAe,CAAC,QAAS,QAAS,KAAM,MAAO,YAAa,aAAc,YAAa,aAAc,cAAe,eAAgB,eAAgB,gBAAiB,eAAgB,gBAAiB,iBAAkB,kBAAmB,UAAW,QAAS,aAAc,WAAY,YAAY,EACrS,SAAa,CAAC,MAAO,KAAK,EAC1B,UAAc,CAAC,OAAQ,OAAQ,OAAQ,MAAO,MAAO,OAAQ,MAAO,QAAS,MAAO,MAAO,SAAU,MAAO,WAAY,SAAU,WAAY,SAAU,OAAQ,MAAO,KAAK,EAC5K,WAAe,CAAC,YAAa,YAAa,MAAO,KAAM,MAAO,KAAM,QAAS,MAAO,SAAU,OAAQ,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,IAAI,EAC3L,cAAkB,CAAC,KAAM,GAAG,EAC5B,UAAc,CAAC,GAAG,CACpB,CAAC,EAED,SAASQ,EAAmBC,EAAQ,CAClC,OAAO,IAAI,OAAO,QAAUA,EAAO,KAAK,GAAG,EAAI,OAAQ,GAAG,CAC5D,CAEA,SAASC,EAAWD,EAAQ,CAC1B,OAAO,IAAI,OAAO,OAASA,EAAO,KAAK,GAAG,EAAI,IAAK,GAAG,CACxD,CAEA,SAASP,GAAe,CACtB,MAAO,CACL,UAAY,GACZ,SAAW,GACX,gBAAkB,GAClB,SAAW,EACf,CACA,CAEA,SAASC,EAAYQ,EAAQ,CAC3B,MAAO,CACL,UAAYA,EAAO,UACnB,SAAWA,EAAO,SAClB,gBAAkBA,EAAO,gBACzB,SAAWA,EAAO,QACtB,CACA,CAEA,SAASP,EAAqBQ,EAAS,CACrC,OAAO,SAASC,EAASF,EAAQ,CAC/B,GAAIE,EAAQ,MAAMH,EAAWE,EAAQ,QAAQ,EAAG,GAAM,EAAI,EACxD,MAAO,UAGT,GAAI,CAACD,EAAO,UAAW,CACrB,GAAIE,EAAQ,MAAM,eAAgB,GAAM,EAAI,EAC1C,OAAAF,EAAO,UAAY,GACZ,UAET,GAAIE,EAAQ,MAAMH,EAAWE,EAAQ,aAAa,EAAG,GAAM,EAAI,EAC7D,OAAAC,EAAQ,UAAS,EACV,SAEV,CACD,GAAIF,EAAO,UACT,OAAIE,EAAQ,MAAM,eAAgB,GAAM,EAAI,EAC1CF,EAAO,UAAY,GAEnBE,EAAQ,UAAS,EACZ,UAGT,GAAI,CAACF,EAAO,UAAYE,EAAQ,MAAM,kBAAmB,GAAM,EAAI,EACjE,OAAAF,EAAO,SAAW,GACX,SAET,GAAIA,EAAO,SACT,OAAIE,EAAQ,MAAM,WAAY,GAAM,EAAI,EACtCF,EAAO,SAAW,GAElBE,EAAQ,UAAS,EACZ,SAYT,GATMD,EAAQ,UAAYC,EAAQ,MAAML,EAAmBI,EAAQ,QAAQ,EAAG,GAAM,EAAI,GAGpFC,EAAQ,MAAML,EAAmBI,EAAQ,OAAO,EAAG,GAAM,EAAI,GAG7DC,EAAQ,MAAML,EAAmBI,EAAQ,SAAS,EAAG,GAAM,EAAI,GAG/DC,EAAQ,MAAMH,EAAWE,EAAQ,UAAU,EAAG,GAAM,EAAI,EAC1D,MAAO,UAET,GAAMA,EAAQ,WAAaC,EAAQ,MAAMH,EAAWE,EAAQ,SAAS,EAAG,GAAM,EAAI,EAChF,MAAO,WAET,GAAMA,EAAQ,WAAaC,EAAQ,MAAMH,EAAWE,EAAQ,SAAS,EAAG,GAAM,EAAI,EAChF,MAAO,WAGT,GAAI,CAACA,EAAQ,iBAAqBA,EAAQ,YAAcC,EAAQ,MAAM,IAAK,GAAM,EAAI,EACnF,OAAAD,EAAQ,gBAAkB,GACnB,UAET,GAAIA,EAAQ,gBAAiB,CAC3B,GAAIA,EAAQ,aAAe,MAAQC,EAAQ,MAAML,EAAmBI,EAAQ,UAAU,EAAG,GAAM,EAAI,EACjG,MAAO,YAET,GAAIC,EAAQ,MAAM,IAAK,GAAM,EAAI,EAC/B,OAAAD,EAAQ,gBAAkB,GACnB,SAEV,CAED,OAAAC,EAAQ,KAAI,EACL,IACX,CACA","x_google_ignoreList":[0]}