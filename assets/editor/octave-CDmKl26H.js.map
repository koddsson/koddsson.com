{"version":3,"file":"octave-CDmKl26H.js","sources":["../node_modules/@codemirror/legacy-modes/mode/octave.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\nvar doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\nvar expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\nvar identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\nvar builtins = wordRegexp([\n  'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',\n  'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',\n  'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',\n  'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',\n  'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',\n  'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',\n  'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'\n]);\n\nvar keywords = wordRegexp([\n  'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',\n  'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',\n  'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',\n  'continue', 'pkg'\n]);\n\n\n// tokenizers\nfunction tokenTranspose(stream, state) {\n  if (!stream.sol() && stream.peek() === '\\'') {\n    stream.next();\n    state.tokenize = tokenBase;\n    return 'operator';\n  }\n  state.tokenize = tokenBase;\n  return tokenBase(stream, state);\n}\n\n\nfunction tokenComment(stream, state) {\n  if (stream.match(/^.*%}/)) {\n    state.tokenize = tokenBase;\n    return 'comment';\n  };\n  stream.skipToEnd();\n  return 'comment';\n}\n\nfunction tokenBase(stream, state) {\n  // whitespaces\n  if (stream.eatSpace()) return null;\n\n  // Handle one line Comments\n  if (stream.match('%{')){\n    state.tokenize = tokenComment;\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  if (stream.match(/^[%#]/)){\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n      stream.tokenize = tokenBase;\n      return 'number'; };\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n  }\n  if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };\n\n  // Handle Strings\n  var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)\n  if (m) { return m[1] ? 'string' : \"error\"; }\n\n  // Handle words\n  if (stream.match(keywords)) { return 'keyword'; } ;\n  if (stream.match(builtins)) { return 'builtin'; } ;\n  if (stream.match(identifiers)) { return 'variable'; } ;\n\n  if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };\n  if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };\n\n  if (stream.match(expressionEnd)) {\n    state.tokenize = tokenTranspose;\n    return null;\n  };\n\n\n  // Handle non-detected items\n  stream.next();\n  return 'error';\n};\n\n\nexport const octave = {\n  name: \"octave\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    if (style === 'number' || style === 'variable'){\n      state.tokenize = tokenTranspose;\n    }\n    return style;\n  },\n\n  languageData: {\n    commentTokens: {line: \"%\"}\n  }\n};\n\n"],"names":["wordRegexp","words","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","expressionEnd","identifiers","builtins","keywords","tokenTranspose","stream","state","tokenBase","tokenComment","m","octave","style"],"mappings":"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","x_google_ignoreList":[0]}