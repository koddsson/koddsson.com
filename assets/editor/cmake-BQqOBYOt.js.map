{"version":3,"file":"cmake-BQqOBYOt.js","sources":["../node_modules/@codemirror/legacy-modes/mode/cmake.js"],"sourcesContent":["var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n\nfunction tokenString(stream, state) {\n  var current, prev, found_var = false;\n  while (!stream.eol() && (current = stream.next()) != state.pending) {\n    if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n      found_var = true;\n      break;\n    }\n    prev = current;\n  }\n  if (found_var) {\n    stream.backUp(1);\n  }\n  if (current == state.pending) {\n    state.continueString = false;\n  } else {\n    state.continueString = true;\n  }\n  return \"string\";\n}\n\nfunction tokenize(stream, state) {\n  var ch = stream.next();\n\n  // Have we found a variable?\n  if (ch === '$') {\n    if (stream.match(variable_regex)) {\n      return 'variableName.special';\n    }\n    return 'variable';\n  }\n  // Should we still be looking for the end of a string?\n  if (state.continueString) {\n    // If so, go through the loop again\n    stream.backUp(1);\n    return tokenString(stream, state);\n  }\n  // Do we just have a function on our hands?\n  // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n  if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n    stream.backUp(1);\n    return 'def';\n  }\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // Have we found a string?\n  if (ch == \"'\" || ch == '\"') {\n    // Store the type (single or double)\n    state.pending = ch;\n    // Perform the looping function to find the end\n    return tokenString(stream, state);\n  }\n  if (ch == '(' || ch == ')') {\n    return 'bracket';\n  }\n  if (ch.match(/[0-9]/)) {\n    return 'number';\n  }\n  stream.eatWhile(/[\\w-]/);\n  return null;\n}\nexport const cmake = {\n  name: \"cmake\",\n  startState: function () {\n    var state = {};\n    state.inDefinition = false;\n    state.inInclude = false;\n    state.continueString = false;\n    state.pending = false;\n    return state;\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    return tokenize(stream, state);\n  }\n};\n\n"],"names":["variable_regex","tokenString","stream","state","current","prev","found_var","tokenize","ch","cmake"],"mappings":"AAAA,IAAIA,EAAiB,wBAErB,SAASC,EAAYC,EAAQC,EAAO,CAElC,QADIC,EAASC,EAAMC,EAAY,GACxB,CAACJ,EAAO,IAAG,IAAOE,EAAUF,EAAO,KAAI,IAAOC,EAAM,SAAS,CAClE,GAAIC,IAAY,KAAOC,GAAQ,MAAQF,EAAM,SAAW,IAAK,CAC3DG,EAAY,GACZ,KACD,CACDD,EAAOD,CACR,CACD,OAAIE,GACFJ,EAAO,OAAO,CAAC,EAEbE,GAAWD,EAAM,QACnBA,EAAM,eAAiB,GAEvBA,EAAM,eAAiB,GAElB,QACT,CAEA,SAASI,EAASL,EAAQC,EAAO,CAC/B,IAAIK,EAAKN,EAAO,OAGhB,OAAIM,IAAO,IACLN,EAAO,MAAMF,CAAc,EACtB,uBAEF,WAGLG,EAAM,gBAERD,EAAO,OAAO,CAAC,EACRD,EAAYC,EAAQC,CAAK,GAI9BD,EAAO,MAAM,aAAa,GAAKA,EAAO,MAAM,eAAe,GAC7DA,EAAO,OAAO,CAAC,EACR,OAELM,GAAM,KACRN,EAAO,UAAS,EACT,WAGLM,GAAM,KAAOA,GAAM,KAErBL,EAAM,QAAUK,EAETP,EAAYC,EAAQC,CAAK,GAE9BK,GAAM,KAAOA,GAAM,IACd,UAELA,EAAG,MAAM,OAAO,EACX,UAETN,EAAO,SAAS,OAAO,EAChB,KACT,CACY,MAACO,EAAQ,CACnB,KAAM,QACN,WAAY,UAAY,CACtB,IAAIN,EAAQ,CAAA,EACZ,OAAAA,EAAM,aAAe,GACrBA,EAAM,UAAY,GAClBA,EAAM,eAAiB,GACvBA,EAAM,QAAU,GACTA,CACR,EACD,MAAO,SAAUD,EAAQC,EAAO,CAC9B,OAAID,EAAO,WAAmB,KACvBK,EAASL,EAAQC,CAAK,CAC9B,CACH","x_google_ignoreList":[0]}