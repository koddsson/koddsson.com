{"version":3,"file":"verilog-B8zRBZsk.js","sources":["../node_modules/@codemirror/legacy-modes/mode/verilog.js"],"sourcesContent":["function mkVerilog(parserConfig) {\n\n  var statementIndentUnit = parserConfig.statementIndentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      noIndentKeywords = parserConfig.noIndentKeywords || [],\n      multiLineStrings = parserConfig.multiLineStrings,\n      hooks = parserConfig.hooks || {};\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  /**\n   * Keywords from IEEE 1800-2012\n   */\n  var keywords = words(\n    \"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind \" +\n      \"bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config \" +\n      \"const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable \" +\n      \"dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup \" +\n      \"endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask \" +\n      \"enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin \" +\n      \"function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import \" +\n      \"incdir include initial inout input inside instance int integer interconnect interface intersect join join_any \" +\n      \"join_none large let liblist library local localparam logic longint macromodule matches medium modport module \" +\n      \"nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed \" +\n      \"parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup \" +\n      \"pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg \" +\n      \"reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime \" +\n      \"s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify \" +\n      \"specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on \" +\n      \"table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior \" +\n      \"trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void \" +\n      \"wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor\");\n\n  /** Operators from IEEE 1800-2012\n      unary_operator ::=\n      + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n      binary_operator ::=\n      + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **\n      | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<\n      | -> | <->\n      inc_or_dec_operator ::= ++ | --\n      unary_module_path_operator ::=\n      ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n      binary_module_path_operator ::=\n      == | != | && | || | & | | | ^ | ^~ | ~^\n  */\n  var isOperatorChar = /[\\+\\-\\*\\/!~&|^%=?:]/;\n  var isBracketChar = /[\\[\\]{}()]/;\n\n  var unsignedNumber = /\\d[0-9_]*/;\n  var decimalLiteral = /\\d*\\s*'s?d\\s*\\d[0-9_]*/i;\n  var binaryLiteral = /\\d*\\s*'s?b\\s*[xz01][xz01_]*/i;\n  var octLiteral = /\\d*\\s*'s?o\\s*[xz0-7][xz0-7_]*/i;\n  var hexLiteral = /\\d*\\s*'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*/i;\n  var realLiteral = /(\\d[\\d_]*(\\.\\d[\\d_]*)?E-?[\\d_]+)|(\\d[\\d_]*\\.\\d[\\d_]*)/i;\n\n  var closingBracketOrWord = /^((\\w+)|[)}\\]])/;\n  var closingBracket = /[)}\\]]/;\n\n  var curPunc;\n  var curKeyword;\n\n  // Block openings which are closed by a matching keyword in the form of (\"end\" + keyword)\n  // E.g. \"task\" => \"endtask\"\n  var blockKeywords = words(\n    \"case checker class clocking config function generate interface module package \" +\n      \"primitive program property specify sequence table task\"\n  );\n\n  // Opening/closing pairs\n  var openClose = {};\n  for (var keyword in blockKeywords) {\n    openClose[keyword] = \"end\" + keyword;\n  }\n  openClose[\"begin\"] = \"end\";\n  openClose[\"casex\"] = \"endcase\";\n  openClose[\"casez\"] = \"endcase\";\n  openClose[\"do\"   ] = \"while\";\n  openClose[\"fork\" ] = \"join;join_any;join_none\";\n  openClose[\"covergroup\"] = \"endgroup\";\n\n  for (var i in noIndentKeywords) {\n    var keyword = noIndentKeywords[i];\n    if (openClose[keyword]) {\n      openClose[keyword] = undefined;\n    }\n  }\n\n  // Keywords which open statements that are ended with a semi-colon\n  var statementKeywords = words(\"always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while\");\n\n  function tokenBase(stream, state) {\n    var ch = stream.peek(), style;\n    if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;\n    if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false)\n      return style;\n\n    if (/[,;:\\.]/.test(ch)) {\n      curPunc = stream.next();\n      return null;\n    }\n    if (isBracketChar.test(ch)) {\n      curPunc = stream.next();\n      return \"bracket\";\n    }\n    // Macros (tick-defines)\n    if (ch == '`') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"def\";\n      } else {\n        return null;\n      }\n    }\n    // System calls\n    if (ch == '$') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"meta\";\n      } else {\n        return null;\n      }\n    }\n    // Time literals\n    if (ch == '#') {\n      stream.next();\n      stream.eatWhile(/[\\d_.]/);\n      return \"def\";\n    }\n    // Strings\n    if (ch == '\"') {\n      stream.next();\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    // Comments\n    if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      stream.backUp(1);\n    }\n\n    // Numeric literals\n    if (stream.match(realLiteral) ||\n        stream.match(decimalLiteral) ||\n        stream.match(binaryLiteral) ||\n        stream.match(octLiteral) ||\n        stream.match(hexLiteral) ||\n        stream.match(unsignedNumber) ||\n        stream.match(realLiteral)) {\n      return \"number\";\n    }\n\n    // Operators\n    if (stream.eatWhile(isOperatorChar)) {\n      return \"meta\";\n    }\n\n    // Keywords / plain variables\n    if (stream.eatWhile(/[\\w\\$_]/)) {\n      var cur = stream.current();\n      if (keywords[cur]) {\n        if (openClose[cur]) {\n          curPunc = \"newblock\";\n        }\n        if (statementKeywords[cur]) {\n          curPunc = \"newstatement\";\n        }\n        curKeyword = cur;\n        return \"keyword\";\n      }\n      return \"variable\";\n    }\n\n    stream.next();\n    return null;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    var c = new Context(indent, col, type, null, state.context);\n    return state.context = c;\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\") {\n      state.indented = state.context.indented;\n    }\n    return state.context = state.context.prev;\n  }\n\n  function isClosing(text, contextClosing) {\n    if (text == contextClosing) {\n      return true;\n    } else {\n      // contextClosing may be multiple keywords separated by ;\n      var closingKeywords = contextClosing.split(\";\");\n      for (var i in closingKeywords) {\n        if (text == closingKeywords[i]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on any bracket char: {}()[]\n    // or on a match of any of the block closing keywords, at\n    // the end of a line\n    var allClosings = [];\n    for (var i in openClose) {\n      if (openClose[i]) {\n        var closings = openClose[i].split(\";\");\n        for (var j in closings) {\n          allClosings.push(closings[j]);\n        }\n      }\n    }\n    var re = new RegExp(\"[{}()\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n    return re;\n  }\n\n  // Interface\n  return {\n    name: \"verilog\",\n\n    startState: function(indentUnit) {\n      var state = {\n        tokenize: null,\n        context: new Context(-indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n      if (hooks.startState) hooks.startState(state);\n      return state;\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (hooks.token) {\n        // Call hook, with an optional return value of a style to override verilog styling.\n        var style = hooks.token(stream, state);\n        if (style !== undefined) {\n          return style;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      curKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\" || style == \"variable\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == ctx.type) {\n        popContext(state);\n      } else if ((curPunc == \";\" && ctx.type == \"statement\") ||\n                 (ctx.type && isClosing(curKeyword, ctx.type))) {\n        ctx = popContext(state);\n        while (ctx && ctx.type == \"statement\") ctx = popContext(state);\n      } else if (curPunc == \"{\") {\n        pushContext(state, stream.column(), \"}\");\n      } else if (curPunc == \"[\") {\n        pushContext(state, stream.column(), \"]\");\n      } else if (curPunc == \"(\") {\n        pushContext(state, stream.column(), \")\");\n      } else if (ctx && ctx.type == \"endcase\" && curPunc == \":\") {\n        pushContext(state, stream.column(), \"statement\");\n      } else if (curPunc == \"newstatement\") {\n        pushContext(state, stream.column(), \"statement\");\n      } else if (curPunc == \"newblock\") {\n        if (curKeyword == \"function\" && ctx && (ctx.type == \"statement\" || ctx.type == \"endgroup\")) {\n          // The 'function' keyword can appear in some other contexts where it actually does not\n          // indicate a function (import/export DPI and covergroup definitions).\n          // Do nothing in this case\n        } else if (curKeyword == \"task\" && ctx && ctx.type == \"statement\") {\n          // Same thing for task\n        } else {\n          var close = openClose[curKeyword];\n          pushContext(state, stream.column(), close);\n        }\n      }\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return null;\n      if (hooks.indent) {\n        var fromHook = hooks.indent(state);\n        if (fromHook >= 0) return fromHook;\n      }\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = false;\n      var possibleClosing = textAfter.match(closingBracketOrWord);\n      if (possibleClosing)\n        closing = isClosing(possibleClosing[0], ctx.type);\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit || cx.unit);\n      else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);\n      else if (ctx.type == \")\" && !closing) return ctx.indented + (statementIndentUnit || cx.unit);\n      else return ctx.indented + (closing ? 0 : cx.unit);\n    },\n\n    languageData: {\n      indentOnInput: buildElectricInputRegEx(),\n      commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n    }\n  };\n};\n\nexport const verilog = mkVerilog({})\n\n// TL-Verilog mode.\n// See tl-x.org for language spec.\n// See the mode in action at makerchip.com.\n// Contact: steve.hoover@redwoodeda.com\n\n// TLV Identifier prefixes.\n// Note that sign is not treated separately, so \"+/-\" versions of numeric identifiers\n// are included.\nvar tlvIdentifierStyle = {\n  \"|\": \"link\",\n  \">\": \"property\",  // Should condition this off for > TLV 1c.\n  \"$\": \"variable\",\n  \"$$\": \"variable\",\n  \"?$\": \"qualifier\",\n  \"?*\": \"qualifier\",\n  \"-\": \"contentSeparator\",\n  \"/\": \"property\",\n  \"/-\": \"property\",\n  \"@\": \"variableName.special\",\n  \"@-\": \"variableName.special\",\n  \"@++\": \"variableName.special\",\n  \"@+=\": \"variableName.special\",\n  \"@+=-\": \"variableName.special\",\n  \"@--\": \"variableName.special\",\n  \"@-=\": \"variableName.special\",\n  \"%+\": \"tag\",\n  \"%-\": \"tag\",\n  \"%\": \"tag\",\n  \">>\": \"tag\",\n  \"<<\": \"tag\",\n  \"<>\": \"tag\",\n  \"#\": \"tag\",  // Need to choose a style for this.\n  \"^\": \"attribute\",\n  \"^^\": \"attribute\",\n  \"^!\": \"attribute\",\n  \"*\": \"variable\",\n  \"**\": \"variable\",\n  \"\\\\\": \"keyword\",\n  \"\\\"\": \"comment\"\n};\n\n// Lines starting with these characters define scope (result in indentation).\nvar tlvScopePrefixChars = {\n  \"/\": \"beh-hier\",\n  \">\": \"beh-hier\",\n  \"-\": \"phys-hier\",\n  \"|\": \"pipe\",\n  \"?\": \"when\",\n  \"@\": \"stage\",\n  \"\\\\\": \"keyword\"\n};\nvar tlvIndentUnit = 3;\nvar tlvTrackStatements = false;\nvar tlvIdentMatch = /^([~!@#\\$%\\^&\\*-\\+=\\?\\/\\\\\\|'\"<>]+)([\\d\\w_]*)/;  // Matches an identifier.\n// Note that ':' is excluded, because of it's use in [:].\nvar tlvLineIndentationMatch = /^[! ] */;\nvar tlvCommentMatch = /^\\/[\\/\\*]/;\n\nexport const tlv = mkVerilog({\n  hooks: {\n    electricInput: false,\n\n    // Return undefined for verilog tokenizing, or style for TLV token (null not used).\n    // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting\n    // can be enabled with the definition of cm-tlv-* styles, including highlighting for:\n    //   - M4 tokens\n    //   - TLV scope indentation\n    //   - Statement delimitation (enabled by tlvTrackStatements)\n    token: function(stream, state) {\n      var style = undefined;\n      var match;  // Return value of pattern matches.\n\n      // Set highlighting mode based on code region (TLV or SV).\n      if (stream.sol() && ! state.tlvInBlockComment) {\n        // Process region.\n        if (stream.peek() == '\\\\') {\n          style = \"def\";\n          stream.skipToEnd();\n          if (stream.string.match(/\\\\SV/)) {\n            state.tlvCodeActive = false;\n          } else if (stream.string.match(/\\\\TLV/)){\n            state.tlvCodeActive = true;\n          }\n        }\n        // Correct indentation in the face of a line prefix char.\n        if (state.tlvCodeActive && stream.pos == 0 &&\n            (state.indented == 0) && (match = stream.match(tlvLineIndentationMatch, false))) {\n          state.indented = match[0].length;\n        }\n\n        // Compute indentation state:\n        //   o Auto indentation on next line\n        //   o Indentation scope styles\n        var indented = state.indented;\n        var depth = indented / tlvIndentUnit;\n        if (depth <= state.tlvIndentationStyle.length) {\n          // not deeper than current scope\n\n          var blankline = stream.string.length == indented;\n          var chPos = depth * tlvIndentUnit;\n          if (chPos < stream.string.length) {\n            var bodyString = stream.string.slice(chPos);\n            var ch = bodyString[0];\n            if (tlvScopePrefixChars[ch] && ((match = bodyString.match(tlvIdentMatch)) &&\n                                            tlvIdentifierStyle[match[1]])) {\n              // This line begins scope.\n              // Next line gets indented one level.\n              indented += tlvIndentUnit;\n              // Style the next level of indentation (except non-region keyword identifiers,\n              //   which are statements themselves)\n              if (!(ch == \"\\\\\" && chPos > 0)) {\n                state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];\n                if (tlvTrackStatements) {state.statementComment = false;}\n                depth++;\n              }\n            }\n          }\n          // Clear out deeper indentation levels unless line is blank.\n          if (!blankline) {\n            while (state.tlvIndentationStyle.length > depth) {\n              state.tlvIndentationStyle.pop();\n            }\n          }\n        }\n        // Set next level of indentation.\n        state.tlvNextIndent = indented;\n      }\n\n      if (state.tlvCodeActive) {\n        // Highlight as TLV.\n\n        var beginStatement = false;\n        if (tlvTrackStatements) {\n          // This starts a statement if the position is at the scope level\n          // and we're not within a statement leading comment.\n          beginStatement =\n            (stream.peek() != \" \") &&   // not a space\n            (style === undefined) &&    // not a region identifier\n            !state.tlvInBlockComment && // not in block comment\n            //!stream.match(tlvCommentMatch, false) && // not comment start\n          (stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit);  // at scope level\n          if (beginStatement) {\n            if (state.statementComment) {\n              // statement already started by comment\n              beginStatement = false;\n            }\n            state.statementComment =\n              stream.match(tlvCommentMatch, false); // comment start\n          }\n        }\n\n        var match;\n        if (style !== undefined) {\n        } else if (state.tlvInBlockComment) {\n          // In a block comment.\n          if (stream.match(/^.*?\\*\\//)) {\n            // Exit block comment.\n            state.tlvInBlockComment = false;\n            if (tlvTrackStatements && !stream.eol()) {\n              // Anything after comment is assumed to be real statement content.\n              state.statementComment = false;\n            }\n          } else {\n            stream.skipToEnd();\n          }\n          style = \"comment\";\n        } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {\n          // Start comment.\n          if (match[0] == \"//\") {\n            // Line comment.\n            stream.skipToEnd();\n          } else {\n            // Block comment.\n            state.tlvInBlockComment = true;\n          }\n          style = \"comment\";\n        } else if (match = stream.match(tlvIdentMatch)) {\n          // looks like an identifier (or identifier prefix)\n          var prefix = match[1];\n          var mnemonic = match[2];\n          if (// is identifier prefix\n            tlvIdentifierStyle.hasOwnProperty(prefix) &&\n              // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)\n            (mnemonic.length > 0 || stream.eol())) {\n            style = tlvIdentifierStyle[prefix];\n          } else {\n            // Just swallow one character and try again.\n            // This enables subsequent identifier match with preceding symbol character, which\n            //   is legal within a statement.  (Eg, !$reset).  It also enables detection of\n            //   comment start with preceding symbols.\n            stream.backUp(stream.current().length - 1);\n          }\n        } else if (stream.match(/^\\t+/)) {\n          // Highlight tabs, which are illegal.\n          style = \"invalid\";\n        } else if (stream.match(/^[\\[\\]{}\\(\\);\\:]+/)) {\n          // [:], (), {}, ;.\n          style = \"meta\";\n        } else if (match = stream.match(/^[mM]4([\\+_])?[\\w\\d_]*/)) {\n          // m4 pre proc\n          style = (match[1] == \"+\") ? \"keyword.special\" : \"keyword\";\n        } else if (stream.match(/^ +/)){\n          // Skip over spaces.\n          if (stream.eol()) {\n            // Trailing spaces.\n            style = \"error\";\n          }\n        } else if (stream.match(/^[\\w\\d_]+/)) {\n          // alpha-numeric token.\n          style = \"number\";\n        } else {\n          // Eat the next char w/ no formatting.\n          stream.next();\n        }\n      } else {\n        if (stream.match(/^[mM]4([\\w\\d_]*)/)) {\n          // m4 pre proc\n          style = \"keyword\";\n        }\n      }\n      return style;\n    },\n\n    indent: function(state) {\n      return (state.tlvCodeActive == true) ? state.tlvNextIndent : -1;\n    },\n\n    startState: function(state) {\n      state.tlvIndentationStyle = [];  // Styles to use for each level of indentation.\n      state.tlvCodeActive = true;  // True when we're in a TLV region (and at beginning of file).\n      state.tlvNextIndent = -1;    // The number of spaces to autoindent the next line if tlvCodeActive.\n      state.tlvInBlockComment = false;  // True inside /**/ comment.\n      if (tlvTrackStatements) {\n        state.statementComment = false;  // True inside a statement's header comment.\n      }\n    }\n\n  }\n});\n"],"names":["mkVerilog","parserConfig","statementIndentUnit","dontAlignCalls","noIndentKeywords","multiLineStrings","hooks","words","str","obj","i","keywords","isOperatorChar","isBracketChar","unsignedNumber","decimalLiteral","binaryLiteral","octLiteral","hexLiteral","realLiteral","closingBracketOrWord","closingBracket","curPunc","curKeyword","blockKeywords","openClose","keyword","statementKeywords","tokenBase","stream","state","ch","style","tokenString","tokenComment","cur","quote","escaped","next","end","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","indent","c","popContext","t","isClosing","text","contextClosing","closingKeywords","buildElectricInputRegEx","allClosings","closings","j","re","indentUnit","ctx","close","textAfter","cx","fromHook","firstChar","closing","possibleClosing","verilog","tlvIdentifierStyle","tlvScopePrefixChars","tlvIndentUnit","tlvIdentMatch","tlvLineIndentationMatch","tlvCommentMatch","tlv","match","depth","blankline","chPos","bodyString","prefix","mnemonic"],"mappings":"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","x_google_ignoreList":[0]}