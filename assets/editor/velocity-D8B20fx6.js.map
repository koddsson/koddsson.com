{"version":3,"file":"velocity-D8B20fx6.js","sources":["../node_modules/@codemirror/legacy-modes/mode/velocity.js"],"sourcesContent":["function parseWords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                          \"#{end} #{else} #{break} #{stop}\");\nvar functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                           \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\nvar specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\nvar isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next();\n  // start of unparsed string?\n  if ((ch == \"'\") && !state.inString && state.inParams) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenString(ch));\n  }\n  // start of parsed string?\n  else if ((ch == '\"')) {\n    state.lastTokenWasBuiltin = false;\n    if (state.inString) {\n      state.inString = false;\n      return \"string\";\n    }\n    else if (state.inParams)\n      return chain(stream, state, tokenString(ch));\n  }\n  // is it one of the special signs []{}().,;? Separator?\n  else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams)\n      state.inParams = true;\n    else if (ch == \")\") {\n      state.inParams = false;\n      state.lastTokenWasBuiltin = true;\n    }\n    return null;\n  }\n  // start of a number value?\n  else if (/\\d/.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  // multi line comment?\n  else if (ch == \"#\" && stream.eat(\"*\")) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenComment);\n  }\n  // unparsed content?\n  else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenUnparsed);\n  }\n  // single line comment?\n  else if (ch == \"#\" && stream.eat(\"#\")) {\n    state.lastTokenWasBuiltin = false;\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // variable?\n  else if (ch == \"$\") {\n    stream.eat(\"!\");\n    stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n    // is it one of the specials?\n    if (specials && specials.propertyIsEnumerable(stream.current())) {\n      return \"keyword\";\n    }\n    else {\n      state.lastTokenWasBuiltin = true;\n      state.beforeParams = true;\n      return \"builtin\";\n    }\n  }\n  // is it a operator?\n  else if (isOperatorChar.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  else {\n    // get the whole word\n    stream.eatWhile(/[\\w\\$_{}@]/);\n    var word = stream.current();\n    // is it one of the listed keywords?\n    if (keywords && keywords.propertyIsEnumerable(word))\n      return \"keyword\";\n    // is it one of the listed functions?\n    if (functions && functions.propertyIsEnumerable(word) ||\n        (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n        !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n      state.beforeParams = true;\n      state.lastTokenWasBuiltin = false;\n      return \"keyword\";\n    }\n    if (state.inString) {\n      state.lastTokenWasBuiltin = false;\n      return \"string\";\n    }\n    if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n      return \"builtin\";\n    // default: just a \"word\"\n    state.lastTokenWasBuiltin = false;\n    return null;\n  }\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if ((next == quote) && !escaped) {\n        end = true;\n        break;\n      }\n      if (quote=='\"' && stream.peek() == '$' && !escaped) {\n        state.inString = true;\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    if (ch == \"]\")\n      maybeEnd++;\n    else if (ch != \" \")\n      maybeEnd = 0;\n  }\n  return \"meta\";\n}\n// Interface\n\nexport const velocity = {\n  name: \"velocity\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false,\n      inString: false,\n      lastTokenWasBuiltin: false\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"##\", block: {open: \"#*\", close: \"*#\"}}\n  }\n};\n"],"names":["parseWords","str","obj","words","i","keywords","functions","specials","isOperatorChar","chain","stream","state","f","tokenBase","beforeParams","ch","tokenString","tokenComment","tokenUnparsed","word","quote","escaped","next","end","maybeEnd","velocity"],"mappings":"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","x_google_ignoreList":[0]}