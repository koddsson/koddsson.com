{"version":3,"file":"haskell-Cc9ltRVu.js","sources":["../node_modules/@codemirror/legacy-modes/mode/haskell.js"],"sourcesContent":["function switchState(source, setState, f) {\n  setState(f);\n  return f(source, setState);\n}\n\n// These should all be Unicode extended, as per the Haskell 2010 report\nvar smallRE = /[a-z_]/;\nvar largeRE = /[A-Z]/;\nvar digitRE = /\\d/;\nvar hexitRE = /[0-9A-Fa-f]/;\nvar octitRE = /[0-7]/;\nvar idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\nvar symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\nvar specialRE = /[(),;[\\]`{}]/;\nvar whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal(source, setState) {\n  if (source.eatWhile(whiteCharRE)) {\n    return null;\n  }\n\n  var ch = source.next();\n  if (specialRE.test(ch)) {\n    if (ch == '{' && source.eat('-')) {\n      var t = \"comment\";\n      if (source.eat('#')) {\n        t = \"meta\";\n      }\n      return switchState(source, setState, ncomment(t, 1));\n    }\n    return null;\n  }\n\n  if (ch == '\\'') {\n    if (source.eat('\\\\')) {\n      source.next();  // should handle other escapes here\n    }\n    else {\n      source.next();\n    }\n    if (source.eat('\\'')) {\n      return \"string\";\n    }\n    return \"error\";\n  }\n\n  if (ch == '\"') {\n    return switchState(source, setState, stringLiteral);\n  }\n\n  if (largeRE.test(ch)) {\n    source.eatWhile(idRE);\n    if (source.eat('.')) {\n      return \"qualifier\";\n    }\n    return \"type\";\n  }\n\n  if (smallRE.test(ch)) {\n    source.eatWhile(idRE);\n    return \"variable\";\n  }\n\n  if (digitRE.test(ch)) {\n    if (ch == '0') {\n      if (source.eat(/[xX]/)) {\n        source.eatWhile(hexitRE); // should require at least 1\n        return \"integer\";\n      }\n      if (source.eat(/[oO]/)) {\n        source.eatWhile(octitRE); // should require at least 1\n        return \"number\";\n      }\n    }\n    source.eatWhile(digitRE);\n    var t = \"number\";\n    if (source.match(/^\\.\\d+/)) {\n      t = \"number\";\n    }\n    if (source.eat(/[eE]/)) {\n      t = \"number\";\n      source.eat(/[-+]/);\n      source.eatWhile(digitRE); // should require at least 1\n    }\n    return t;\n  }\n\n  if (ch == \".\" && source.eat(\".\"))\n    return \"keyword\";\n\n  if (symbolRE.test(ch)) {\n    if (ch == '-' && source.eat(/-/)) {\n      source.eatWhile(/-/);\n      if (!source.eat(symbolRE)) {\n        source.skipToEnd();\n        return \"comment\";\n      }\n    }\n    source.eatWhile(symbolRE);\n    return \"variable\"\n  }\n\n  return \"error\";\n}\n\nfunction ncomment(type, nest) {\n  if (nest == 0) {\n    return normal;\n  }\n  return function(source, setState) {\n    var currNest = nest;\n    while (!source.eol()) {\n      var ch = source.next();\n      if (ch == '{' && source.eat('-')) {\n        ++currNest;\n      }\n      else if (ch == '-' && source.eat('}')) {\n        --currNest;\n        if (currNest == 0) {\n          setState(normal);\n          return type;\n        }\n      }\n    }\n    setState(ncomment(type, currNest));\n    return type;\n  };\n}\n\nfunction stringLiteral(source, setState) {\n  while (!source.eol()) {\n    var ch = source.next();\n    if (ch == '\"') {\n      setState(normal);\n      return \"string\";\n    }\n    if (ch == '\\\\') {\n      if (source.eol() || source.eat(whiteCharRE)) {\n        setState(stringGap);\n        return \"string\";\n      }\n      if (source.eat('&')) {\n      }\n      else {\n        source.next(); // should handle other escapes here\n      }\n    }\n  }\n  setState(normal);\n  return \"error\";\n}\n\nfunction stringGap(source, setState) {\n  if (source.eat('\\\\')) {\n    return switchState(source, setState, stringLiteral);\n  }\n  source.next();\n  setState(normal);\n  return \"error\";\n}\n\n\nvar wellKnownWords = (function() {\n  var wkw = {};\n  function setType(t) {\n    return function () {\n      for (var i = 0; i < arguments.length; i++)\n        wkw[arguments[i]] = t;\n    };\n  }\n\n  setType(\"keyword\")(\n    \"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\",\n    \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\",\n    \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n\n  setType(\"keyword\")(\n    \"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n\n  setType(\"builtin\")(\n    \"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<*\", \"<=\",\n    \"<$>\", \"<*>\", \"=<<\", \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\",\n    \"*>\", \"**\");\n\n  setType(\"builtin\")(\n    \"Applicative\", \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\",\n    \"Eq\", \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\",\n    \"GT\", \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\",\n    \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\",\n    \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\",\n    \"String\", \"True\");\n\n  setType(\"builtin\")(\n    \"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\",\n    \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\",\n    \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\",\n    \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\",\n    \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\",\n    \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\",\n    \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\",\n    \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\",\n    \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\",\n    \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\",\n    \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\",\n    \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\",\n    \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\",\n    \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\",\n    \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\", \"pure\",\n    \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\",\n    \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\",\n    \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\",\n    \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\",\n    \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\",\n    \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\",\n    \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\",\n    \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\",\n    \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\",\n    \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\",\n    \"zip3\", \"zipWith\", \"zipWith3\");\n\n  return wkw;\n})();\n\nexport const haskell = {\n  name: \"haskell\",\n  startState: function ()  { return { f: normal }; },\n  copyState:  function (s) { return { f: s.f }; },\n\n  token: function(stream, state) {\n    var t = state.f(stream, function(s) { state.f = s; });\n    var w = stream.current();\n    return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n  },\n\n  languageData: {\n    commentTokens: {line: \"--\", block: {open: \"{-\", close: \"-}\"}}\n  }\n};\n"],"names":["switchState","source","setState","f","smallRE","largeRE","digitRE","hexitRE","octitRE","idRE","symbolRE","specialRE","whiteCharRE","normal","ch","t","ncomment","stringLiteral","type","nest","currNest","stringGap","wellKnownWords","wkw","setType","i","haskell","s","stream","state","w"],"mappings":"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","x_google_ignoreList":[0]}