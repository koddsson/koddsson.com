{"version":3,"file":"sieve-Cs_nHDzU.js","sources":["../node_modules/@codemirror/legacy-modes/mode/sieve.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = words(\"if elsif else stop require\");\nvar atoms = words(\"true false not\");\n\nfunction tokenBase(stream, state) {\n\n  var ch = stream.next();\n  if (ch == \"/\" && stream.eat(\"*\")) {\n    state.tokenize = tokenCComment;\n    return tokenCComment(stream, state);\n  }\n\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch == \"\\\"\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (ch == \"(\") {\n    state._indent.push(\"(\");\n    // add virtual angel wings so that editor behaves...\n    // ...more sane incase of broken brackets\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch === \"{\") {\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch == \")\")  {\n    state._indent.pop();\n    state._indent.pop();\n  }\n\n  if (ch === \"}\") {\n    state._indent.pop();\n    return null;\n  }\n\n  if (ch == \",\")\n    return null;\n\n  if (ch == \";\")\n    return null;\n\n\n  if (/[{}\\(\\),;]/.test(ch))\n    return null;\n\n  // 1*DIGIT \"K\" / \"M\" / \"G\"\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\d]/);\n    stream.eat(/[KkMmGg]/);\n    return \"number\";\n  }\n\n  // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n  if (ch == \":\") {\n    stream.eatWhile(/[a-zA-Z_]/);\n    stream.eatWhile(/[a-zA-Z0-9_]/);\n\n    return \"operator\";\n  }\n\n  stream.eatWhile(/\\w/);\n  var cur = stream.current();\n\n  // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n  // *(multiline-literal / multiline-dotstart)\n  // \".\" CRLF\n  if ((cur == \"text\") && stream.eat(\":\"))\n  {\n    state.tokenize = tokenMultiLineString;\n    return \"string\";\n  }\n\n  if (keywords.propertyIsEnumerable(cur))\n    return \"keyword\";\n\n  if (atoms.propertyIsEnumerable(cur))\n    return \"atom\";\n\n  return null;\n}\n\nfunction tokenMultiLineString(stream, state)\n{\n  state._multiLineString = true;\n  // the first line is special it may contain a comment\n  if (!stream.sol()) {\n    stream.eatSpace();\n\n    if (stream.peek() == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    stream.skipToEnd();\n    return \"string\";\n  }\n\n  if ((stream.next() == \".\")  && (stream.eol()))\n  {\n    state._multiLineString = false;\n    state.tokenize = tokenBase;\n  }\n\n  return \"string\";\n}\n\nfunction tokenCComment(stream, state) {\n  var maybeEnd = false, ch;\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == \"/\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped)\n        break;\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nexport const sieve = {\n  name: \"sieve\",\n  startState: function(base) {\n    return {tokenize: tokenBase,\n            baseIndent: base || 0,\n            _indent: []};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace())\n      return null;\n\n    return (state.tokenize || tokenBase)(stream, state);\n  },\n\n  indent: function(state, _textAfter, cx) {\n    var length = state._indent.length;\n    if (_textAfter && (_textAfter[0] == \"}\"))\n      length--;\n\n    if (length <0)\n      length = 0;\n\n    return length * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*\\}$/\n  }\n};\n"],"names":["words","str","obj","i","keywords","atoms","tokenBase","stream","state","ch","tokenCComment","tokenString","cur","tokenMultiLineString","maybeEnd","quote","escaped","sieve","base","_textAfter","cx","length"],"mappings":"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","x_google_ignoreList":[0]}