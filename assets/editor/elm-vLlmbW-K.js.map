{"version":3,"file":"elm-vLlmbW-K.js","sources":["../node_modules/@codemirror/legacy-modes/mode/elm.js"],"sourcesContent":["function switchState(source, setState, f)\n{\n  setState(f);\n  return f(source, setState);\n}\n\nvar lowerRE = /[a-z]/;\nvar upperRE = /[A-Z]/;\nvar innerRE = /[a-zA-Z0-9_]/;\n\nvar digitRE = /[0-9]/;\nvar hexRE = /[0-9A-Fa-f]/;\nvar symbolRE = /[-&*+.\\\\/<>=?^|:]/;\nvar specialRE = /[(),[\\]{}]/;\nvar spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal()\n{\n  return function(source, setState)\n  {\n    if (source.eatWhile(spacesRE))\n    {\n      return null;\n    }\n\n    var char = source.next();\n\n    if (specialRE.test(char))\n    {\n      return (char === '{' && source.eat('-'))\n        ? switchState(source, setState, chompMultiComment(1))\n        : (char === '[' && source.match('glsl|'))\n        ? switchState(source, setState, chompGlsl)\n        : 'builtin';\n    }\n\n    if (char === '\\'')\n    {\n      return switchState(source, setState, chompChar);\n    }\n\n    if (char === '\"')\n    {\n      return source.eat('\"')\n        ? source.eat('\"')\n        ? switchState(source, setState, chompMultiString)\n        : 'string'\n      : switchState(source, setState, chompSingleString);\n    }\n\n    if (upperRE.test(char))\n    {\n      source.eatWhile(innerRE);\n      return 'type';\n    }\n\n    if (lowerRE.test(char))\n    {\n      var isDef = source.pos === 1;\n      source.eatWhile(innerRE);\n      return isDef ? \"def\" : \"variable\";\n    }\n\n    if (digitRE.test(char))\n    {\n      if (char === '0')\n      {\n        if (source.eat(/[xX]/))\n        {\n          source.eatWhile(hexRE); // should require at least 1\n          return \"number\";\n        }\n      }\n      else\n      {\n        source.eatWhile(digitRE);\n      }\n      if (source.eat('.'))\n      {\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      if (source.eat(/[eE]/))\n      {\n        source.eat(/[-+]/);\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      return \"number\";\n    }\n\n    if (symbolRE.test(char))\n    {\n      if (char === '-' && source.eat('-'))\n      {\n        source.skipToEnd();\n        return \"comment\";\n      }\n      source.eatWhile(symbolRE);\n      return \"keyword\";\n    }\n\n    if (char === '_')\n    {\n      return \"keyword\";\n    }\n\n    return \"error\";\n  }\n}\n\nfunction chompMultiComment(nest)\n{\n  if (nest == 0)\n  {\n    return normal();\n  }\n  return function(source, setState)\n  {\n    while (!source.eol())\n    {\n      var char = source.next();\n      if (char == '{' && source.eat('-'))\n      {\n        ++nest;\n      }\n      else if (char == '-' && source.eat('}'))\n      {\n        --nest;\n        if (nest === 0)\n        {\n          setState(normal());\n          return 'comment';\n        }\n      }\n    }\n    setState(chompMultiComment(nest));\n    return 'comment';\n  }\n}\n\nfunction chompMultiString(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '\"' && source.eat('\"') && source.eat('\"'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nfunction chompSingleString(source, setState)\n{\n  while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n  if (source.skipTo('\"'))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompChar(source, setState)\n{\n  while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n  if (source.skipTo(\"'\"))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompGlsl(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '|' && source.eat(']'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nvar wellKnownWords = {\n  case: 1,\n  of: 1,\n  as: 1,\n  if: 1,\n  then: 1,\n  else: 1,\n  let: 1,\n    in: 1,\n  type: 1,\n  alias: 1,\n  module: 1,\n  where: 1,\n  import: 1,\n  exposing: 1,\n  port: 1\n};\n\nexport const elm = {\n  name: \"elm\",\n  startState: function ()  { return { f: normal() }; },\n  copyState:  function (s) { return { f: s.f }; },\n\n  token: function(stream, state) {\n    var type = state.f(stream, function(s) { state.f = s; });\n    var word = stream.current();\n    return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n  },\n\n  languageData: {\n    commentTokens: {line: \"--\"}\n  }\n};\n"],"names":["switchState","source","setState","f","lowerRE","upperRE","innerRE","digitRE","hexRE","symbolRE","specialRE","spacesRE","normal","char","chompMultiComment","chompGlsl","chompChar","chompMultiString","chompSingleString","isDef","nest","wellKnownWords","elm","s","stream","state","type","word"],"mappings":"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","x_google_ignoreList":[0]}